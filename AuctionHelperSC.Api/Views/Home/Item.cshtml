@{
}


<!doctype html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap demo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" type="text/javascript"></script>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css"
          rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
</head>

<body data-bs-theme="dark">
    <!-- Заголовок с поиском -->
    <nav class="navbar bg-body-tertiary">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                <i class="bi bi-radioactive pe-1" style="font-size: 1.5rem;"> Stalcraft Auction Helper</i>
            </a>
            <div class="d-flex" role="search">
                <script>
                    function changePage() {
                        let id = document.getElementById("searchSelect").value;
                        if (id == "") {
                            return
                        } else {
                            window.location.href = `https://localhost:7006${id}`
                        }
                    }
                </script>
                <select id="searchSelect" placeholder="Поиск предмета" autocomplete="off">
                    <option value="">Выберите предмет</option>
                </select>
                <button class="btn btn-success ms-2" onclick="changePage()" ">Перейти к предмету</button>
            </div>
        </div>
        <script>
            "use strict";

            let listUrl = "https://raw.githubusercontent.com/EXBO-Studio/stalcraft-database/main/ru/listing.json";

            let search = document.getElementById("searchSelect")

            fetch(listUrl)
                .then(response => response.json())
                .then(data => {
                    for (let item of data) {
                        let path = item.data.split("/")
                        let itemID = path[path.length - 1].replace(".json", "")

                        search.insertAdjacentHTML("beforeend", `<option value="${item.data.replace(".json", "")}">${item.name.lines.ru}</option>`)
                    }
                })
                .catch(function (err) {
                    console.log("Fetch Error: ", err);
                });

            $("#searchSelect")
            $(document).ready(function () {
                $("#searchSelect").select2({
                    dropdownAutoWidth: true,
                    width: 'auto',
                    theme: 'bootstrap-5'
                });
            });
            // let settings = {
            //     plugins: ['dropdown_input'],
            //     sortField: {
            //         field: "text",
            //         direction: "asc"
            //     }
            // };

            // new TomSelect("#searchSelect", {});
        </script>
    </nav>
    <!-- Предмет -->
    <div class="container mt-4">
        <div class="row align-items-start justify-content-evenly">
            <div class="col-lg-5 col-md-12 card">
                <!-- backend NOTE: set <id>.png -->
                <img class="mt-3 mx-2 px-5 img-thumbnail mx-auto" width="250"
                     src="@ViewData["icon"]" class="card-img-top" alt="...">
                <div class="card-body" id="itemCard">
                    <!-- <h5 class="card-title">L85A1</h5>
                    <p class="card-text">SA80 (SA-80 - Small Arms for 1980 - стрелковое оружие 1980-х годов) -
                        британский комплекс стрелкового оружия, разработанный в середине 1980-х годов</p>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th scope="col">Характеристика</th>
                                <th scope="col">Значение</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Урон</td>
                                <td>21.4 ед.</td>
                            </tr>
                            <tr>
                                <td>Начало падения урона</td>
                                <td>18 м.</td>
                            </tr>
                            <tr>
                                <td>Конец падения урона</td>
                                <td>60 м.</td>
                            </tr>
                            <tr>
                                <td>Максимальная дистанция</td>
                                <td>135 м</td>
                            </tr>
                            <tr>
                                <td>Объем магазина</td>
                                <td>30</td>
                            </tr>
                            <tr>
                                <td>Скорострельность</td>
                                <td>650 выст/мин</td>
                            </tr>
                            <tr>
                                <td>Время перезарядки</td>
                                <td>3.60 с.</td>
                            </tr>
                            <tr>
                                <td>Время тактической перезарядки</td>
                                <td>2.80 с.</td>
                            </tr>
                            <tr>
                                <td>Разброс</td>
                                <td>0.43 °</td>
                            </tr>
                            <tr>
                                <td>Разброс от бедра</td>
                                <td>3.00 °</td>
                            </tr>
                            <tr>
                                <td>Вертикальная отдача</td>
                                <td>0.40 °</td>
                            </tr>
                            <tr>
                                <td>Горизонтальная отдача</td>
                                <td>0.15 °</td>
                            </tr>
                            <tr>
                                <td>Время доставания</td>
                                <td>0.95 с.</td>
                            </tr>
                            <tr>
                                <td>Скорость прицеливания</td>
                                <td>0.20 с.</td>
                            </tr>
                            <tr>
                                <td>Множитель урона в голову</td>
                                <td>x1.25</td>
                            </tr>
                            <tr>
                                <td>Множитель урона по конечностям
                                </td>
                                <td>x0.50</td>
                            </tr>
                        </tbody>
                    </table> -->
                </div>
            </div>
            <div class="container col-lg-7 col-md-12">
                <div class="card mb-2">
                    <h5 class="card-header">Текущие лоты</h5>
                    <div class="card-body">
                        <table class="table table-bordered table-sm table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">Номер</th>
                                    <th scope="col">Стоимость текущая</th>
                                    <th scope="col">Стоимость выкупа</th>
                                    <th scope="col">Окончание аукциона</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <th scope="row">1</th>
                                    <td>250000</td>
                                    <td>253000</td>
                                    <td>10.02.2024 - 18:50:04</td>
                                </tr>
                                <tr>
                                    <th scope="row">2</th>
                                    <td>150000</td>
                                    <td>254000</td>
                                    <td>10.02.2024 - 18:03:05</td>
                                </tr>
                                <tr>
                                    <th scope="row">3</th>
                                    <td>123000</td>
                                    <td>300000</td>
                                    <td>11.02.2024 - 18:42:56</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="card">
                    <h5 class="card-header">История покупок</h5>
                    <div class="card-body">
                        <!-- <img src="assets/graph.jpg" class="img-fluid mb-3"> -->
                        <!-- Местоположение графика -->
                        <div id="chartdiv" class="chartdiv"></div>

                        <div class="input-group">
                            <select class="form-select" id="inputPrediction"
                                    aria-label="Example select with button addon">
                                <option selected>Выберите способ прогнозирования</option>
                                <option value="1">Линейный</option>
                                <option value="2">Какой-то второй</option>
                                <option value="3">Нейросеть</option>
                            </select>
                            <button class="btn btn-outline-secondary" type="button">Построить прогноз</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <script>
            "use strict";
            // backend NOTE: set <id>.json

            var messageFromViewData = '@ViewData["id"]';

            let url = "https://raw.githubusercontent.com/EXBO-Studio/stalcraft-database/main/ru/items/" + messageFromViewData + ".json";

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    let card = document.getElementById("itemCard")

                    card.insertAdjacentHTML("beforeend", `<h3 class="card-title">${data.name.lines.ru}</h3>`)
                    card.insertAdjacentHTML("beforeend", `<h5 class="card-title">${data.color}</h5>`)
                    card.insertAdjacentHTML("beforeend", `<p class="card-title">${data.status.state}</p>`)

                    for (let block of data.infoBlocks) {
                        let elementToAdd = ""

                        switch (block.type) {
                            case "list":
                                if (block.elements.length == 0) {
                                    elementToAdd += "<hr>"

                                    break
                                }

                                elementToAdd += `
                                            <table class="table table-striped table-bordered table-sm table-hover">
                                                <thead>
                                                    <tr>
                                                        <th scope="col">Характеристика</th>
                                                        <th scope="col">Значение</th>
                                                    </tr>
                                                </thead>
                                            <tbody>`

                                for (let elem of block.elements) {
                                    switch (elem.type) {
                                        case "key-value":
                                            if (elem.value.lines ?? false) {
                                                elementToAdd += `
                                                                        <tr>
                                                                            <td>${elem.key.lines.ru}</td>
                                                                            <td>${elem.value.lines.ru}</td>
                                                                        </tr>`
                                            }
                                            break;
                                        case "range":
                                        case "numeric":
                                            elementToAdd += `
                                                        <tr>
                                                            <td>${elem.name.lines.ru}</td>
                                                            <td>${elem.formatted.value.ru}</td>
                                                        </tr>`
                                            break;

                                        case "text":
                                            elementToAdd += `
                                                        <tr>
                                                            <td colspan="2">${elem.text.lines.ru}</td>
                                                        </tr>`
                                            break;

                                        default:
                                            console.log("Wrong elem type: " + elem.type)
                                            break;
                                    }
                                }

                                elementToAdd += `</tbody></table>`

                                break;
                            case "damage":
                                elementToAdd += `
                                            <table class="table table-striped table-bordered table-sm table-hover">
                                                <thead>
                                                    <tr>
                                                        <th scope="col">Характеристика</th>
                                                        <th scope="col">Значение</th>
                                                    </tr>
                                                </thead>
                                            <tbody>`

                                elementToAdd += `
                                            <tr>
                                                <td>Начальный урон</td>
                                                <td>${block.startDamage}</td>
                                            </tr>`

                                elementToAdd += `
                                            <tr>
                                                <td>Начало уменьшения урона</td>
                                                <td>${block.damageDecreaseStart}</td>
                                            </tr>`

                                elementToAdd += `
                                            <tr>
                                                <td>Конечный урон</td>
                                                <td>${block.endDamage}</td>
                                            </tr>`

                                elementToAdd += `
                                            <tr>
                                                <td>Конец уменьшения урона</td>
                                                <td>${block.damageDecreaseEnd}</td>
                                            </tr>`

                                elementToAdd += `
                                            <tr>
                                                <td>Максимальная дистанция</td>
                                                <td>${block.maxDistance}</td>
                                            </tr>`

                                elementToAdd += `</tbody></table>`
                                break;
                            case "text":
                                elementToAdd += `<p>${block.text.lines.ru}</p>`
                                break;
                            default:
                                console.log("Wrong block type: " + block.type)
                                break;
                        }

                        if (elementToAdd ?? false) {
                            card.insertAdjacentHTML("beforeend", elementToAdd)
                        }
                    }
                })
                .catch(function (err) {
                    console.log("Fetch Error: ", err);
                });


        </script>
    </div>
    <!-- Футер -->
    <div class="container">
        <footer class="pt-3 mt-4 border-top">
            <p class="text-body-secondary text-center">
                Сайт разработан в рамках проекта для курсовой работы по ТРПО<br>
                © 2023 Все права на игру принадлежат EXBO
            </p>
        </footer>
    </div>
    <!-- Скрипты -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
            crossorigin="anonymous"></script>
    <!-- Styles -->
    <style>
        #chartdiv {
            width: 100%;
            height: 500px;
        }
    </style>

    <!-- Resources -->
    <script src="https://cdn.amcharts.com/lib/5/index.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/themes/Dark.js"></script>
    <!-- <script src="~/js/graph.js"></script>-->
    <script>
        am5.ready(function () {
            // Create root element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            var root = am5.Root.new("chartdiv");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root.setThemes([
                am5themes_Animated.new(root),
                am5themes_Dark.new(root)
            ]);

            // Create chart
            // https://www.amcharts.com/docs/v5/charts/xy-chart/
            var chart = root.container.children.push(am5xy.XYChart.new(root, {
                panX: true,
                panY: true,
                wheelY: "zoomXY",
                pinchZoomX: true,
                pinchZoomY: true
            }));

            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/
            var xAxis = chart.xAxes.push(am5xy.DateAxis.new(root, {
                baseInterval: { timeUnit: "second", count: 1 },
                renderer: am5xy.AxisRendererX.new(root, {}),
                // tooltip: am5.Tooltip.new(root, {})
            }));

            var yAxis = chart.yAxes.push(am5xy.ValueAxis.new(root, {
                renderer: am5xy.AxisRendererY.new(root, {}),
                tooltip: am5.Tooltip.new(root, {}),
            }));

            // Create series
            // https://www.amcharts.com/docs/v5/charts/xy-chart/series/
            var series0 = chart.series.push(am5xy.LineSeries.new(root, {
                calculateAggregates: true,
                xAxis: xAxis,
                yAxis: yAxis,
                valueYField: "costOrdinary",
                valueXField: "date",
                tooltip: am5.Tooltip.new(root, {
                    labelText: "Дата: {valueX.formatDate(\"dd.MM.yyyy, HH:mm:ss\")}\nСтоимость: {valueY}"
                }),
            }));


            // Add bullet
            // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Bullets
            series0.bullets.push(function () {
                var graphics = am5.Triangle.new(root, {
                    fill: series0.get("fill"),
                    width: 15,
                    height: 13
                });
                return am5.Bullet.new(root, {
                    sprite: graphics
                });
            });


            // Create second series
            // https://www.amcharts.com/docs/v5/charts/xy-chart/series/
            var series1 = chart.series.push(am5xy.LineSeries.new(root, {
                calculateAggregates: true,
                xAxis: xAxis,
                yAxis: yAxis,
                valueYField: "costUncommon",
                valueXField: "date",
                tooltip: am5.Tooltip.new(root, {
                    labelText: "Дата: {valueX.formatDate(\"dd.MM.yyyy, HH:mm:ss\")}\nСтоимость: {valueY}"
                }),
            }));

            // Add bullet
            // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Bullets
            series1.bullets.push(function () {
                var graphics = am5.Triangle.new(root, {
                    fill: series1.get("fill"),
                    width: 15,
                    height: 13,
                    rotation: 180
                });
                return am5.Bullet.new(root, {
                    sprite: graphics
                });
            });

            // Create second series
            // https://www.amcharts.com/docs/v5/charts/xy-chart/series/
            var series2 = chart.series.push(am5xy.LineSeries.new(root, {
                calculateAggregates: true,
                xAxis: xAxis,
                yAxis: yAxis,
                valueYField: "costRare",
                valueXField: "date",
                tooltip: am5.Tooltip.new(root, {
                    labelText: "Дата: {valueX.formatDate(\"dd.MM.yyyy, HH:mm:ss\")}\nСтоимость: {valueY}"
                }),
            }));

            // Add bullet
            // https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Bullets
            series2.bullets.push(function () {
                var graphics = am5.Triangle.new(root, {
                    fill: series2.get("fill"),
                    width: 15,
                    height: 13,
                    rotation: 180
                });
                return am5.Bullet.new(root, {
                    sprite: graphics
                });
            });

            series0.strokes.template.set("strokeOpacity", 0);
            series1.strokes.template.set("strokeOpacity", 0);
            series2.strokes.template.set("strokeOpacity", 0);

            // trend series
            /*var trendSeries0 = chart.series.push(am5xy.LineSeries.new(root, {
                xAxis: xAxis,
                yAxis: yAxis,
                valueYField: "y",
                valueXField: "x",
                stroke: series0.get("stroke")
            }));

            // Считать самим
            trendSeries0.data.setAll([
                { x: new Date(2011, 0, 1, 2, 3, 4).getTime(), y: 2130 },
                { x: new Date(2011, 0, 1, 2, 5, 8).getTime(), y: 100500 }
            ])

            var trendSeries1 = chart.series.push(am5xy.LineSeries.new(root, {
                xAxis: xAxis,
                yAxis: yAxis,
                valueYField: "y",
                valueXField: "x",
                stroke: series1.get("stroke")
            }));*/

            // Считать самим
            /*trendSeries1.data.setAll([
                { x: new Date(2011, 0, 1, 2, 3, 4).getTime(), y: 500500 },
                { x: new Date(2011, 0, 1, 2, 5, 8).getTime(), y: 510500 }
            ])*/

            /*var trendSeries2 = chart.series.push(am5xy.LineSeries.new(root, {
                xAxis: xAxis,
                yAxis: yAxis,
                valueYField: "y",
                valueXField: "x",
                stroke: series1.get("stroke")
            }));*/

            // Считать самим
            /*trendSeries2.data.setAll([
                { x: new Date(2011, 0, 1, 2, 3, 4).getTime(), y: 1100500 },
                { x: new Date(2011, 0, 1, 2, 5, 8).getTime(), y: 1110500 }
            ])*/

            // Add cursor
            // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/
            chart.set("cursor", am5xy.XYCursor.new(root, {
                xAxis: xAxis,
                yAxis: yAxis,
                snapToSeries: [series0, series1]
            }));

            // Add scrollbars
            // https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/
            chart.set("scrollbarX", am5.Scrollbar.new(root, {
                orientation: "horizontal"
            }));

            chart.set("scrollbarY", am5.Scrollbar.new(root, {
                orientation: "vertical"
            }));

            let itemId = '@ViewData["itemId"]';
            let getHistoryUrl = "https://localhost:7006/api/auction/itemhistory/" + itemId;

            let responseJson
            let jsonData
            let graphData = [];
            fetch(getHistoryUrl,{
                method: 'GET',
                headers: {
                'Content-Type': 'application/json',
                }})
                .then(response => response.json())
                .then(data => {
                    console.log(data.result);
                    // get data from api
                    for(let i = 0; i < data.result.length; i++){
                        let elem = data.result[i];
                        graphData.push({
                            "date": Date.parse(elem.Time),
                            "costOrdinary": elem.PricePerItem});
                    }
                    console.log(graphData);
                    //graphData = data
                                series0.set("fill", am5.color(0xFFFFFF));
            series1.set("fill", am5.color(0x7FFF00));
            series2.set("fill", am5.color(0x1E90FF));
                    series0.data.setAll(graphData);
                    series1.data.setAll(graphData);
                    series2.data.setAll(graphData);
                    chart.appear(1000, 100);
                })
                .catch(function (err) {
                    console.log("Fetch Error: ", err);
                });

            



            /*[{
                "date": new Date(2011, 0, 1, 2, 3, 4).getTime(),
                "costOrdinary": 100500,
            }, {
                "date": new Date(2011, 0, 1, 2, 3, 5).getTime(),
                "costOrdinary": 43130,
            }, {
                "date": new Date(2011, 0, 1, 2, 3, 6).getTime(),
                "costOrdinary": 114240,
            }, {
                "date": new Date(2011, 0, 1, 2, 4, 4).getTime(),
                "costOrdinary": 11230,
            }, {
                "date": new Date(2011, 0, 1, 2, 4, 9).getTime(),
                "costOrdinary": 100500,
            }, {
                "date": new Date(2011, 0, 1, 2, 5, 4).getTime(),
                "costOrdinary": 100500,
            }, {
                "date": new Date(2011, 0, 1, 2, 5, 8).getTime(),
                "costOrdinary": 89130,
            }, {
                "date": new Date(2011, 0, 1, 2, 3, 4).getTime(),
                "costUncommon": 500500,
            }, {
                "date": new Date(2011, 0, 1, 2, 3, 5).getTime(),
                "costUncommon": 600130,
            }, {
                "date": new Date(2011, 0, 1, 2, 3, 6).getTime(),
                "costUncommon": 414240,
            }, {
                "date": new Date(2011, 0, 1, 2, 4, 4).getTime(),
                "costUncommon": 621230,
            }, {
                "date": new Date(2011, 0, 1, 2, 4, 9).getTime(),
                "costUncommon": 400500,
            }, {
                "date": new Date(2011, 0, 1, 2, 5, 4).getTime(),
                "costUncommon": 700500,
            }, {
                "date": new Date(2011, 0, 1, 2, 5, 8).getTime(),
                "costUncommon": 652130,
            }, {
                "date": new Date(2011, 0, 1, 2, 3, 4).getTime(),
                "costRare": 1100500,
            }, {
                "date": new Date(2011, 0, 1, 2, 3, 5).getTime(),
                "costRare": 1012130,
            }, {
                "date": new Date(2011, 0, 1, 2, 3, 6).getTime(),
                "costRare": 1114240,
            }, {
                "date": new Date(2011, 0, 1, 2, 4, 5).getTime(),
                "costRare": 1011230,
            }, {
                "date": new Date(2011, 0, 1, 2, 4, 9).getTime(),
                "costRare": 1100500,
            }, {
                "date": new Date(2011, 0, 1, 2, 5, 4).getTime(),
                "costRare": 1100500,
            }, {
                "date": new Date(2011, 0, 1, 2, 5, 8).getTime(),
                "costRare": 1002130,
            },]
            series0.set("fill", am5.color(0xFFFFFF));
            series1.set("fill", am5.color(0x7FFF00));
            series2.set("fill", am5.color(0x1E90FF));

            series0.data.setAll(graphData);
            series1.data.setAll(graphData);
            series2.data.setAll(graphData);

            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            series0.appear(1000);
            series1.appear(1000);
            series2.appear(1000);

            /*trendSeries0.set("stroke", am5.color(0xFFFFFF));
            trendSeries1.set("stroke", am5.color(0x7FFF00));
            trendSeries2.set("stroke", am5.color(0x1E90FF));

            trendSeries0.appear(1000);
            trendSeries1.appear(1000);
            trendSeries2.appear(1000);

            chart.appear(1000, 100);*/

        }); // end am5.ready()
    </script>
</body>

</html>